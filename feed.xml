<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://sommerss.github.io/compsci/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sommerss.github.io/compsci/" rel="alternate" type="text/html" /><updated>2022-12-15T22:14:16-06:00</updated><id>https://sommerss.github.io/compsci/feed.xml</id><title type="html">sabine’s blog</title><subtitle>☆ ☆ ☆</subtitle><entry><title type="html">Title</title><link href="https://sommerss.github.io/compsci/2022/12/15/bash-tutorial.html" rel="alternate" type="text/html" title="Title" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://sommerss.github.io/compsci/2022/12/15/bash-tutorial</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Unit 3.15 Random Values Student Copy</title><link href="https://sommerss.github.io/compsci/class/2022/12/15/.html" rel="alternate" type="text/html" title="Unit 3.15 Random Values Student Copy" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://sommerss.github.io/compsci/class/2022/12/15/</id><author><name></name></author><category term="class" /><summary type="html"><![CDATA[Here is our lesson about random values! yay!]]></summary></entry><entry><title type="html">Unit 3.15 Random Values Student Copy</title><link href="https://sommerss.github.io/compsci/class/2022/12/15/copy.html" rel="alternate" type="text/html" title="Unit 3.15 Random Values Student Copy" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>https://sommerss.github.io/compsci/class/2022/12/15/-copy</id><author><name></name></author><category term="class" /><summary type="html"><![CDATA[Here is our lesson about random values! yay!]]></summary></entry><entry><title type="html">Unit 3 Lesson 16, Student Copy</title><link href="https://sommerss.github.io/compsci/2022/12/12/16.html" rel="alternate" type="text/html" title="Unit 3 Lesson 16, Student Copy" /><published>2022-12-12T00:00:00-06:00</published><updated>2022-12-12T00:00:00-06:00</updated><id>https://sommerss.github.io/compsci/2022/12/12/16</id><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">3.14 Libraries</title><link href="https://sommerss.github.io/compsci/2022/12/10/3.14-Libraries.ipynb" rel="alternate" type="text/html" title="3.14 Libraries" /><published>2022-12-10T00:00:00-06:00</published><updated>2022-12-10T00:00:00-06:00</updated><id>https://sommerss.github.io/compsci/2022/12/10/3.14-Libraries</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "# Unit 3.14 Libraries Lesson\n", "> Here is our lesson about libraries!\n", "\n", "- toc: true\n", "- comments: true\n", "- categories: [Week-13,Big-Idea-3]\n", "- image: /images/college-board-logo.png" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "Purpose: Help students streamline and make their coding experience easier through built in packages and methods from a library\n", "Objective: By the end of the lesson, students should be able to fluently use methods from the turtle and math packages, and be able to look up documentation for any python package and us it." ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "fill in the blanks!\n", "# Libraries\n", "Okay, so we've learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there's a more advanced program you don't know how to make? Do you need to make it yourself? Well, not always. \n", "\n", "You've already learned about FUNCTIONS that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? \n", "\n", "PACKAGES allow a python user to import METHODS from a LIBRARY, and use the methods in their code. Most libraries come with DOCUMENTATION on the different methods they entail and how to use them, and they can be found with a quick GOOGLE SEARCH. methods are used with the following: \n", "\n", "#### Note: a method from a package can only be used after the import statement. \n", "\n", "Some libraries are always installed, such as those with the LIST methods which we have previously discussed. But others require a special python keyword called IMPORT. We will learn different ways to IMPORT in Challenge 1.\n", "\n", "Sometimes we only need to import a single METHOD from the package. We can do that with the word FROM, followed by the package name, then the word IMPORT, then the method. This will alllow you to use the method without mentioning the package's name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use \"*\"\n", "\n", "To import a method as an easier name, just do what we did first, add the word AS, and write the name you would like to use that package as.\n", "\n", "# Challenge 1: Basic Libraries\n", "1. Find a python package on the internet and import it\n", "2. Choose a method from the package and import only the method\n", "3. import the package as a more convenient name." ] }, { "cell_type": "code", "execution_count": 7, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "2\n" ] } ], "source": [ "import random as rd\n", "print(rd.randint(0,5))" ] }, { "cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [ { "data": { "text/plain": [ "4" ] }, "execution_count": 5, "metadata": {}, "output_type": "execute_result" } ], "source": [ "from random import randint\n", "randint(0,5)" ] }, { "cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "False\n" ] } ], "source": [ "import math \n", "x = math.isclose(2,10)\n", "print(x)" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "# Challenge 2: Turtle\n", "Turtle is a python DRAWING PACKAGE library which allows you to draw all kinds of different shapes. It's ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a GRAPHICS PACKAGE to display what you've done, but unfortunately it's kind of annoying to make work with vscode.\n", "\n", "Use: repl.it\n", "\n", "Click \"+ Create\", and for language, select \"Python (with Turtle)\"\n", "\n", "[Documentation](https://docs.python.org/3/library/turtle.html#turtle.pendown)\n", "Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn't mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it\n", "\n", "|Commands|\n", "|--------|\n", "|forward(pixels)|\n", "|right(degrees)|\n", "|left(degrees)|\n", "|setpos(x,y)|\n", "|speed(speed)|\n", "|pensize(size)|\n", "|pencolor(color)|\n", "Note: Color should be within quotes, like \"brown\", or \"red\"\n", "\n", "\n", "\n", "![](/compsci/images/turtle.png) \n" ] }, { "cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": [ "from turtle import *\n", "oogway = Turtle()" ] }, { "attachments": {}, "cell_type": "markdown", "metadata": {}, "source": [ "# Challenge 3: Math\n", "The math package allows for some really cool mathematical methods!\n", "\n", "|methods|Action|\n", "|-------|------|\n", "|ceil(x)|computes the smallest integer that is greater than or equal to x|\n", "|floor(x)|rounds to largest intefer less than or equal to x|\n", "|factorial(x)|returns the factorial of x (for example factorial(4) is 4)|\n", "|gcd(x,y)|returns the greatest common denominator of x and y|\n", "|lcm(x,y)|returns the least common multiple of x and y|\n", "\n", "##### Challenge: Create a program which asks for a user input of two numbers, and returns the following:\n", "- each number rounded up\n", "- each number rounded down\n", "- the lcm of the rounded down numbers\n", "- the gcf of the rounded up numbers\n", "- the factorial of each number\n", "- something else using the math package!\n", "[Documentation](https://docs.python.org/3/library/math.html)" ] }, { "cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [ { "name": "stdout", "output_type": "stream", "text": [ "when you round up a you get 1\n", "when you round up b you get 2\n", "when you round down a you get 1\n", "when you round down b you get 1\n", "the least common multiple of a and b rounded down is... 1\n", "the greatest common denominator of a and b rounded up is... 1\n", "the factorial of a is 1\n", "the factorial of b is 1\n", "are a and b close? (within 0.9) True\n" ] } ], "source": [ "import math \n", "from math import *\n", "a = float(input(\"give a number!\"))\n", "b = float(input(\"give a second number!\"))\n", "print(\"when you round up a you get\" + \" \" + str(ceil(a)))\n", "print(\"when you round up b you get\" + \" \" + str(ceil(b)))\n", "print(\"when you round down a you get\" + \" \" + str(floor(a)))\n", "print(\"when you round down b you get\" + \" \" + str(floor(b)))\n", "print(\"the least common multiple of a and b rounded down is...\" + \" \" + str(lcm(floor(a), floor(b))))\n", "print(\"the greatest common denominator of a and b rounded up is...\" + \" \" + str(gcd(ceil(a), ceil(b))))\n", "print(\"the factorial of a is \" + str(factorial(floor(a))))\n", "print(\"the factorial of b is \" + str(factorial(floor(b))))\n", "print(\"are a and b close? (within 0.9) \" + str(isclose(floor(a), floor(b))))\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n" ] } ], "metadata": { "kernelspec": { "display_name": "Python 3.10.6 64-bit", "language": "python", "name": "python3" }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.10.6" }, "orig_nbformat": 4, "vscode": { "interpreter": { "hash": "b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e" } } }, "nbformat": 4, "nbformat_minor": 2 }]]></summary></entry></feed>