{
  
    
        "post0": {
            "title": "to do",
            "content": "to do list . week 1: friday: print out yearbook poster math worksheet and study for test update english notebook (hole punches) for check next week as well as on demand see week 1 comp sci requirements in notes section . by monday: finish comp sci req fix ups ( see notes section ) look at yearbook photo assignment, finish notebook for english and prepare for wednesday on demand, math worksheet, remake graffiti piece for art if wanted and make collage if wanted (can use paper in class so not necessary) .",
            "url": "https://sommerss.github.io/compsci/personal/2022/08/25/To-Do.html",
            "relUrl": "/personal/2022/08/25/To-Do.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Poetry",
            "content": ". . Greys Anatomy Intro . Season one intro song . &lt;/body&gt;",
            "url": "https://sommerss.github.io/compsci/personal/2022/08/23/poetry.html",
            "relUrl": "/personal/2022/08/23/poetry.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;YTime for &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;What command is used to repeat exactly what you&#39;ve just said?&quot;) if rsp == &quot;echo&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is five times seven?&quot;) if rsp == &quot;35&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Post files must be named in ____ format in order to go through&quot;) if rsp == &quot;YYYY-MM-DD.md&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the syntax for adding images to your blog?&quot;) if rsp == &quot;![]{{site.baseurl}}/images/image.png&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, wts running /bin/python3 YTime for 4 questions. Question: What command is used to repeat exactly what you&#39;ve just said? echo is correct! Question: What is five times seven? 35 is correct! Question: Post files must be named in ____ format in order to go through YYYY-MM-DD.md is correct! Question: What is the syntax for adding images to your blog? ![]{{site.baseurl}}/images/image.png is correct! wts you scored 4/4 .",
            "url": "https://sommerss.github.io/compsci/2022/08/23/book.html",
            "relUrl": "/2022/08/23/book.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Notes",
            "content": "Week 1 Notes . python: /compsci/images/APCSP.png for images add post of notes in class do hacks for extra credit (post to issues and etc) for 3.0 add things to python notebook make website look good add index (at top like in APCSP website) . aug 23 function needs perameter such as (prompt) when def is the function when there is a plus sign between two strings it is called concatenation import statement is developed by others that we are calling (library, function)- can look them up python library math for example to import math so it does it for you (no coding) def question_with_response is a function (def defined as question w response) if or else can define if something is correct or incorrect if needed if commands need else commands examples on hello python . insert images into correct images folder in order for them to populate on website use md (markdown) at end in order for wider variety of available functions on posts index.html to make index at top . do little quiz in the hello python notebook (ab the vocab and stuff) and post to jupiter notebook as part of assignment . class repo has been updated- in order to get things you need click pull from vscode APCSP- two extra files (DONE) . reference bash tutorial (pulled extra files from pull function in source control) and take notes on new functions/bash install/capabilities and POST the notebook to MY BLOG (jupyter notebook, pull file to my own repo and post) . additional: figure out titling jupyter notebooks and images, finish modifying blog for personal use (this tri and next tri of comp sci specifically), hacks extra credit (one on both assignments in canvas (week 0 and week 1) and 1 in the bash tutorial section) . make a new file in notebooks for bash and change the terminal to bash . task list: hello python notebook little quiz (show proof of changes so dont just copy directly)(3-5 questions)- done post bash notebook with proof of capabilities change blog site to be more like blog hacks: post to issues (1), customize to be more useful as an actual blog including index and general layout (2), use vocab in quiz, calculate percentage, reference locations in markdown that support vocab (add with #s things in markdown that help with vocab learning), # markdown comments on quiz to help with understanding, run python file directly (from python directory run quiz.py in vscode and post) see additional: .",
            "url": "https://sommerss.github.io/compsci/markdown/2022/08/23/Test-Posts.html",
            "relUrl": "/markdown/2022/08/23/Test-Posts.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Grade Recorder",
            "content": "Directory . Math . English . Art . Yearbook . Comp Sci . Week 0 blog creation post- 2.7- 90%. Did not post to issues section of github with complete number of links. . Week 2 Intros .",
            "url": "https://sommerss.github.io/compsci/personal/2022/08/23/Grade-Log.html",
            "relUrl": "/personal/2022/08/23/Grade-Log.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sommerss.github.io/compsci/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Markdown Post One",
            "content": "Directory . The first link . this originally talked about file naming format, but now i am going to use it as a temporary to do list for my homework. . -english notebook decoration -syllabus quiz -yearbook get to know you -math graphing . The second link . this one was originally about formatting, but now i am inputting a link to the fandom page on remy from ratatouille . Rat page . I love ratatouille . . The third link . This one was about lists, so here is a list of soda I like . dr pepper | cherry coke | root beer | The fourth link . Random video from youtube Here is a link to a random video about portfolio creation that was on my youtube recommended . The fifth link . Here is an example of printing syntax msg=hi print(“msg”) . The sixth link . Wow- this is a lot of links. don’t worry, this is the last one. hope you enjoyed! ☏ ☏ have a nice day .",
            "url": "https://sommerss.github.io/compsci/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "info page",
          "content": "i am a junior at dnhs, my favorite shapes are stars, and my dream career is one in tech. i am passionate about design and art as well as writing and clothing. ☆ .",
          "url": "https://sommerss.github.io/compsci/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "grade goals",
          "content": "Current GPA: 3.93 Goal GPA: Unweighted 3.8 minimum . Goals: . Math: A APEL: A/B Drawing and Painting: A Yearbook: A CSP: A . Secondary Goals: .",
          "url": "https://sommerss.github.io/compsci/grades/",
          "relUrl": "/grades/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sommerss.github.io/compsci/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}